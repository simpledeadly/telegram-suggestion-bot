import { Telegraf } from 'telegraf'
import { callbackQuery } from 'telegraf/filters'
import chalk from 'chalk'
import { sequelize } from './database'
import { SuggestionModel } from './models/suggestion'

const bot = new Telegraf(process.env.BOT_TOKEN!)

const channelId = '-1002462309705' // ID of networkingFB channel
// const testChannelId = '-1002282641909' // ID of test channel
const moderationChannelId = '-1002325968351' // ID of moderation channel
const channelWithSuggestions = '-1002316616198' // ID of channelWithSuggestions channel
const channelWithMessagesFromUsers = '-1002368509706' // ID of channelWithMessagesFromUsers channel

type Suggestion = {
  id: number
  userId: number
  username: string | undefined
  text: string
  status?: 'pending' | 'published' | 'rejected'
  photoId?: string
}

type SuggestionWithStatus<T extends Suggestion['status']> = Suggestion & { status?: T }


let publishedSuggestions: SuggestionWithStatus<'published'>[] = []
let pendingSuggestions: SuggestionWithStatus<'pending'>[] = []
let rejectedSuggestions: SuggestionWithStatus<'rejected'>[] = []

const authorizedUsers = [812999070, 7517081086, 2018873272]; // –Ø, –ú–æ—ë –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –§–∞—Ä–∑–∏–Ω

(async () => {
  try {
    await sequelize.authenticate()
    console.log(chalk.hex('#2b67ff').bold('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ.'))
    
    // await sequelize.sync({ force: true })
    await sequelize.sync()
    console.log(chalk.hex('#2badff').bold('–ú–æ–¥–µ–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.'))
  } catch (error) {
    console.error(chalk.hex('#ff1c1c').bold('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:'), error)
  }
})()

bot.start((ctx) => {
  ctx.reply('–ù–∞—á–Ω–∏—Ç–µ —Å /send <–≤–∞—à–µ_–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ>')
})

const sendToModerators = (suggestion: Suggestion, text: string) => {
  const options = {
    reply_markup: {
      inline_keyboard: [
      [
          { text: '‚òëÔ∏è', callback_data: `publish_${suggestion.id}` },
          { text: 'üîò', callback_data: `reject_${suggestion.id}` },
          { text: 'üßπ', callback_data: `erase_${suggestion.id}` },
          { text: 'üó£Ô∏è', callback_data: `contact_${suggestion.id}`, url: `https://t.me/${suggestion.username}` }
        ]
      ]
    }
  }

  const suggestionText = `–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (${suggestion.id}):\n\n${text}\n\n–æ—Ç @${suggestion.username} (${suggestion.userId})`

  if (suggestion.photoId && suggestion.photoId.length > 0) {
    bot.telegram.sendPhoto(moderationChannelId, suggestion.photoId, { ...options, caption: suggestionText })
      .catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ:', error)
      })
  } else {
    bot.telegram.sendMessage(moderationChannelId, suggestionText, { ...options })
      .catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
      })
  }
}

const handleInbox = (ctx: any, text: string, photoId?: string) => {
  const msg = ctx.message
  console.log('Entities:\n', msg.entities)

  const newSuggestion: SuggestionWithStatus<'pending'> = {
    id: Date.now(),
    userId: msg.from.id,
    username: msg.from.username,
    text,
    photoId
  }

  pendingSuggestions.push({ ...newSuggestion, status: 'pending' })

  ctx.reply(`*${'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é'}* üí¨\n\n_‚Ññ${newSuggestion.id}_`, { parse_mode: 'Markdown' })
    .catch((e: Error) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', e)
    })

  sendToModerators(newSuggestion, newSuggestion.text)
}

bot.command('send', (ctx) => {
  const msg = ctx.message
  const args = msg.text.split(' ')
  const suggestionContent = args.slice(1).join(' ')

  if (args.length < 2) {
    return ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/send <–≤–∞—à–µ_–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ>\n\n–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º')
  }

  try {
    handleInbox(ctx, suggestionContent)
  } catch (error) {
    console.error(error)
    return ctx.reply(`–û—à–∏–±–∫–∞: ${error}`)
  }
})

bot.on('photo', (ctx) => {
  const msg: any = ctx.message

  const errorMessage = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/send <–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ>'
  
  if (msg.caption) {
    const args = msg.caption.split(' ')
    const suggestionContent = args.slice(1).join(' ')
    
    if (args.length < 2) {
      return ctx.reply(errorMessage)
    }
    
    if (args[0] === '/send' && msg.caption && msg.photo && Array.isArray(msg.photo)) {
      const photoId = msg.photo[msg.photo.length - 1].file_id
      
      handleInbox(ctx, suggestionContent, photoId)
    } else {
      ctx.reply(errorMessage)
    }
  } else {
    ctx.reply(errorMessage)
  }
})

bot.command('comment', async (ctx) => {
  const msg = ctx.message
  const senderId = msg.from.id
  const args = msg.text.split(' ')
  
  if (authorizedUsers.includes(senderId)) {
    if (args.length < 3) {
      return ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/comment <ID> <—Å–æ–æ–±—â–µ–Ω–∏–µ>')
    }
  
    const userId = args[1]
    const comment = args.slice(2).join(' ')
  
    try {
      await ctx.telegram.sendMessage(userId, `*${'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:'}*\n${comment}`, { parse_mode: 'Markdown' }).then(() => {
        ctx.telegram.sendMessage(userId, '–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /talk <—Å–æ–æ–±—â–µ–Ω–∏–µ>')
      })
      
      return ctx.reply(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`)
    } catch (e) {
      console.error(e)
      return ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e}`)
    }
  } else {
    return ctx.reply(`*${'–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã'}*`, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º', callback_data: `contact_${812999070}`, url: `https://t.me/simpledeadly` }
          ]
        ]
      }
    })
  }
})

bot.command('talk', async (ctx) => {
  const msg = ctx.message
  const args = msg.text.split(' ')
  const msgContent = args.slice(1).join(' ')

  const username = msg.from.username
  const userId = msg.from.id

  if (msgContent) {
    const message = `@${username} (${userId}):\n${msgContent}`

    await ctx.telegram.sendMessage(channelWithMessagesFromUsers, message, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–û—Ç–≤–µ—Ç–∏—Ç—å –≤ –±–æ—Ç–µ', url: `https://t.me/networking_suggestion_bot` },
          ]
        ]
      }
    })
    
    ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
  } else {
    ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/talk <—Å–æ–æ–±—â–µ–Ω–∏–µ>')
  }
})

bot.command('suggest', async (ctx) => {
  const msg = ctx.message
  const args = msg.text.split(' ')
  const msgContent = args.slice(1).join(' ')

  const username = msg.from.username
  const userId = msg.from.id

  if (msgContent) {
    const message = `@${username} (${userId}):\n${msgContent}`

    await ctx.telegram.sendMessage(channelWithSuggestions, message)
    
    ctx.reply('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
  } else {
    ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/suggest <–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ>')
  }
})

bot.command('donate', async (ctx) => {
  ctx.reply('–¢-–ë–∞–Ω–∫: 5536 9139 0142 9064\n\nUSDT, BNB (BEP-20):\n0x359db439cF004e308E35051F20f999E1bD67824B\n\nUSDT, TON (TON):\nUQBFIZbG8N0dHqQ5lCv5F2Fxenx6jITo9Fk2wGY0pWPn2k31', { parse_mode: 'Markdown' })
})

bot.on('text', ctx => {
  ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n/send ‚Äî –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n/talk ‚Äî –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º\n/suggest ‚Äî –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –±–æ—Ç—É, –∫–∞–Ω–∞–ª—É\n/donate ‚Äî –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞')
})

bot.on(callbackQuery('data'), async (ctx) => {
  const callbackQuery = ctx.callbackQuery
  const msg: any = callbackQuery.message

  const action = callbackQuery.data.split('_')[0]
  const suggestionId = parseInt(callbackQuery.data.split('_')[1])

  const suggestion = pendingSuggestions.find(s => s.id === suggestionId)

  const editMessage = async (suggestion: Suggestion, result: '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' | '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ' | '–°—Ç—ë—Ä—Ç–æ') => {
    if (!msg) return
  
    const isPhoto = Boolean(suggestion.photoId)
    const currentContent = isPhoto ? msg.caption : msg.text
    if (!currentContent) return
    
    const args = currentContent.split(' ')
    const allExceptBeginning = args.slice(2, args.length)
    const updatedContent = '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ' + allExceptBeginning.join(' ')
  
    const statusIcon = result === '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' ? '\n\n‚òëÔ∏è' : '\n\nüîò'
    const newContent = `${updatedContent}${statusIcon} ${result} @${ctx.from.username}`
  
    await (isPhoto
      ? ctx.editMessageCaption(newContent, {
          reply_markup: getReplyMarkup(suggestion),
        })
      : ctx.editMessageText(newContent, {
          reply_markup: getReplyMarkup(suggestion),
        })
    )
  }
  
  const getReplyMarkup = (suggestion: Suggestion) => ({
    inline_keyboard: [
      [
        { text: '–°–≤—è–∑–∞—Ç—å—Å—è üó£Ô∏è', callback_data: `contact_${suggestion.id}`, url: `https://t.me/${suggestion.username}` }
      ]
    ]
  })

  const handleSuggestion = async (action: 'publish' | 'reject' | 'erase' , suggestion?: SuggestionWithStatus<'pending'>) => {
    if (!suggestion) {
      ctx.answerCbQuery('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ')
      return
    }
    
    if (action === 'erase') {
      ctx.answerCbQuery('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—Ç—ë—Ä—Ç–æ')

      pendingSuggestions = pendingSuggestions.filter(s => s.id !== suggestion.id)
      editMessage(suggestion, '–°—Ç—ë—Ä—Ç–æ')

      await ctx.telegram.sendMessage(suggestion.userId, `*${'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'}*` + ` _‚Ññ${suggestion.id}_ ` + `*${'—Å—Ç—ë—Ä—Ç–æ'}* üîò\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.`, { parse_mode: 'Markdown' })

      return
    }
    
    const isPublish = action === 'publish'
    const status = isPublish ? 'published' : 'rejected'
    const message = isPublish ? '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' : '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ'
    
    ctx.answerCbQuery(message)

    try {
      const savedSuggestion = await SuggestionModel.create({ ...suggestion, status })

      console.log(chalk.hex('#ff671').bold(`${isPublish ? '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–µ' : '–û—Ç–∫–ª–æ–Ω—ë–Ω–Ω–æ–µ'} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n`), savedSuggestion)
    } catch (error) {
      console.error(chalk.hex('#ff0000').bold('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:'), error)

      ctx.sendPhoto('https://i.ytimg.com/vi/-jtJ4YUZQiw/hqdefault.jpg', {
        caption: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ...\n–ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö`
      })

      if (isPublish) {
        publishedSuggestions.push({ ...suggestion, status: 'published' })
      } else {
        rejectedSuggestions.push({ ...suggestion, status: 'rejected' })
      }
    }

    pendingSuggestions = pendingSuggestions.filter(s => s.id !== suggestion.id)
    editMessage(suggestion, isPublish ? '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' : '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ')

    const post = `${suggestion.text}` // production template

    const notifyUser = async (suggestionPost: any) => {
      await ctx.telegram.sendMessage(suggestion.userId, `*${'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'}* ‚òëÔ∏è\n\n_‚Ññ${suggestion.id}_`, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–û–Ω–æ —É–∂–µ –∑–¥–µ—Å—å', url: `https://t.me/c/2282641909/${suggestionPost.message_id}` }
            ]
          ]
        }
      })
    }

    if (isPublish) {
      if (suggestion.photoId) {
        notifyUser(await ctx.telegram.sendPhoto(channelId, suggestion.photoId, { caption: suggestion.text, parse_mode: 'Markdown' }))
      } else {
        notifyUser(await ctx.telegram.sendMessage(channelId, post))
      }
    } else {
      await ctx.telegram.sendMessage(suggestion.userId, `*${'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ'}* üîò\n\n_‚Ññ${suggestion.id}_`, { parse_mode: 'Markdown' })
    }
    console.log(chalk.hex('#FFF')(`End:\n`), chalk.hex('#8B5DFF')('pending:'), pendingSuggestions, '\n', chalk.hex('#3D3BF3')(`not published in DB:`), publishedSuggestions, '\n', chalk.hex('#9694FF')(`not rejected in DB:`), rejectedSuggestions, '\n')
  }

  switch (action) {
    case 'publish':
    case 'reject':
    case 'erase':
      await handleSuggestion(action, suggestion)
      break
  }
})

bot.launch().catch(error => {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error)
})