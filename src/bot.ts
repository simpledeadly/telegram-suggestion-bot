import { Telegraf } from 'telegraf'
import { callbackQuery } from 'telegraf/filters'
import chalk from 'chalk'
import { sequelize } from './database'
import { SuggestionModel } from './models/suggestion'

const bot = new Telegraf(process.env.BOT_TOKEN!)

// const channelId = '-1002462309705' // ID of networkingFB channel
const testChannelId = '-1002282641909' // ID of test channel
const moderationChannelId = '-1002325968351' // ID of moderation channel

type Suggestion = {
  id: number
  userId: number
  username: string | undefined
  text: string
  status?: 'pending' | 'published' | 'rejected'
  photoId?: string
}

type SuggestionWithStatus<T extends Suggestion['status']> = Suggestion & { status?: T }


let publishedSuggestions: SuggestionWithStatus<'published'>[] = []
let pendingSuggestions: SuggestionWithStatus<'pending'>[] = []
let rejectedSuggestions: SuggestionWithStatus<'rejected'>[] = [];

(async () => {
  try {
    await sequelize.authenticate()
    console.log(chalk.hex('#2b67ff').bold('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ.'))
    
    // await sequelize.sync()
    await sequelize.sync({ force: true })
    console.log(chalk.hex('#2badff').bold('–ú–æ–¥–µ–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.'))
  } catch (error) {
    console.error(chalk.hex('#ff1c1c').bold('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:'), error)
  }
})()

bot.start((ctx) => {
  ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.')
})

// const escapeMarkdown = (text: string) => {
//   return text.replace(/([_*[\]()~`>#+\-=|{}.!@])/g, '\\$1')
// }


const sendToModerators = (suggestion: Suggestion, text: string) => {
  const options = {
    reply_markup: {
      inline_keyboard: [
      [
          { text: '‚òëÔ∏è', callback_data: `publish_${suggestion.id}` },
          { text: 'üîò', callback_data: `reject_${suggestion.id}` },
          { text: 'üßπ', callback_data: `erase_${suggestion.id}` },
          { text: 'üó£Ô∏è', callback_data: `contact_${suggestion.id}`, url: `https://t.me/${suggestion.username}` }
        ]
      ]
    }
  }

  const suggestionText = `–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (‚Ññ${suggestion.id}):\n\n${text}\n\n–æ—Ç @${suggestion.username}`

  if (suggestion.photoId && suggestion.photoId.length > 0) {
    bot.telegram.sendPhoto(moderationChannelId, suggestion.photoId, { ...options, caption: suggestionText })
      .catch(error => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ:", error)
      })
  } else {
    bot.telegram.sendMessage(moderationChannelId, suggestionText, { ...options })
      .catch(error => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error)
      })
  }
}

const handleInbox = (ctx: any, text: string, photoId?: string) => {
  const msg = ctx.message

  const newSuggestion: SuggestionWithStatus<'pending'> = {
    id: Date.now(),
    userId: msg.from.id,
    username: msg.from.username,
    text,
    photoId
  }

  pendingSuggestions.push({ ...newSuggestion, status: 'pending' })

  ctx.reply(`*${'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é'}* üí¨\n\n_‚Ññ${newSuggestion.id}_`, { parse_mode: 'Markdown' })

  sendToModerators(newSuggestion, newSuggestion.text)
}

bot.on('photo', (ctx) => {
  const msg = ctx.message

  if (msg.caption && msg.photo && Array.isArray(msg.photo)) {
    const photoId = msg.photo[msg.photo.length - 1].file_id

    handleInbox(ctx, msg.caption, photoId)
  } else {
    ctx.reply('–ü—Ä–∏—à–ª–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º')
  }
})

bot.on('text', (ctx) => {
  const msg = ctx.message

  if (msg.text) {
    handleInbox(ctx, msg.text)
  }
})

bot.on(callbackQuery('data'), async (ctx) => {
  const callbackQuery = ctx.callbackQuery
  const msg: any = callbackQuery.message

  const action = callbackQuery.data.split('_')[0]
  const suggestionId = parseInt(callbackQuery.data.split('_')[1])

  const suggestion = pendingSuggestions.find(s => s.id === suggestionId)

  const editMessage = async (suggestion: Suggestion, result: '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' | '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ' | '–°—Ç—ë—Ä—Ç–æ') => {
    if (suggestion.photoId) {
      if (msg && msg.caption) {
        const currentCaption = msg.caption
        
        await ctx.editMessageCaption(`${currentCaption}${result === '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' ? '\n\n‚òëÔ∏è' : '\n\nüîò'} ${result} @${ctx.from.username}`, {
          // parse_mode: 'MarkdownV2',
          reply_markup: {
            inline_keyboard: [
              [
                { text: '–°–≤—è–∑–∞—Ç—å—Å—è üó£Ô∏è', callback_data: `contact_${suggestion.id}`, url: `https://t.me/${suggestion.username}` }
              ]
            ]
          }
        })
      }
    } else {
      if (msg && msg.text) {
        const currentText = msg.text

        await ctx.editMessageText(`${currentText}${result === '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' ? '\n\n‚òëÔ∏è' : '\n\nüîò'} ${result} @${(ctx.from.username)}`, {
          // parse_mode: 'MarkdownV2',
          reply_markup: {
            inline_keyboard: [
              [
                { text: '–°–≤—è–∑–∞—Ç—å—Å—è üó£Ô∏è', callback_data: `contact_${suggestion.id}`, url: `https://t.me/${suggestion.username}` }
              ]
            ]
          }
        })
      }
    }
  }

  const handleSuggestion = async (action: 'publish' | 'reject' | 'erase' , suggestion?: SuggestionWithStatus<'pending'>) => {
    if (!suggestion) {
      ctx.answerCbQuery('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ')
      return
    }
    
    if (action === 'erase') {
      ctx.answerCbQuery('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—Ç—ë—Ä—Ç–æ')

      pendingSuggestions = pendingSuggestions.filter(s => s.id !== suggestion.id)
      editMessage(suggestion, '–°—Ç—ë—Ä—Ç–æ')

      await bot.telegram.sendMessage(suggestion.userId, `*${'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'}*` + ` _‚Ññ${suggestion.id}_ ` + `*${'—Å—Ç—ë—Ä—Ç–æ'}* üîò\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.`, { parse_mode: 'Markdown' })

      return
    }
    
    const isPublish = action === 'publish'
    const status = isPublish ? 'published' : 'rejected'
    const message = isPublish ? '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' : '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ'
    
    ctx.answerCbQuery(message)

    try {
      const savedSuggestion = await SuggestionModel.create({ ...suggestion, status })

      console.log(chalk.hex('#ff671').bold(`${isPublish ? '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–µ' : '–û—Ç–∫–ª–æ–Ω—ë–Ω–Ω–æ–µ'} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n`), savedSuggestion)
    } catch (error) {
      console.error(chalk.hex('#ff0000').bold('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:'), error)

      ctx.sendPhoto('https://i.ytimg.com/vi/-jtJ4YUZQiw/hqdefault.jpg', {
        caption: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ...\n–ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö`
      })

      if (isPublish) {
        publishedSuggestions.push({ ...suggestion, status: 'published' })
      } else {
        rejectedSuggestions.push({ ...suggestion, status: 'rejected' })
      }
    }

    pendingSuggestions = pendingSuggestions.filter(s => s.id !== suggestion.id)
    editMessage(suggestion, isPublish ? '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' : '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ')

    const post = `${suggestion.text}` // production template

    const notifyUser = async (suggestionPost: any) => {
      await bot.telegram.sendMessage(suggestion.userId, `*${'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'}* ‚òëÔ∏è\n\n_‚Ññ${suggestion.id}_`, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–û–Ω–æ —É–∂–µ –∑–¥–µ—Å—å', url: `https://t.me/c/2282641909/${suggestionPost.message_id}` }
            ]
          ]
        }
      })
    }

    if (isPublish) {
      if (suggestion.photoId) {
        notifyUser(await bot.telegram.sendPhoto(testChannelId, suggestion.photoId, { caption: suggestion.text, parse_mode: 'Markdown' }))
      } else {
        notifyUser(await bot.telegram.sendMessage(testChannelId, post))
      }
    } else {
      await bot.telegram.sendMessage(suggestion.userId, `*${'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ'}* üîò\n\n_‚Ññ${suggestion.id}_`, { parse_mode: 'Markdown' })
    }
    console.log(chalk.hex('#FFF')(`End:\n`), chalk.hex('#8B5DFF')('pending:'), pendingSuggestions, '\n', chalk.hex('#3D3BF3')(`not published in DB:`), publishedSuggestions, '\n', chalk.hex('#9694FF')(`not rejected in DB:`), rejectedSuggestions, '\n')
  }

  switch (action) {
    case 'publish':
    case 'reject':
    case 'erase':
      await handleSuggestion(action, suggestion)
      break
  }
})

bot.launch().catch(error => {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error)
})